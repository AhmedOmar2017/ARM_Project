/*******************************************************************************
*====================== Auther: Ahmed Omar  ====================================
=======================   Date:21/7/2022    ====================================
============   function responsible for configration    ========================
=====================  general perpose Timer ===================================
*******************************************************************************/

#ifndef TIMER_H_
#define TIMER_H_

#include "Hw_MCU.h"
#include "IntiCtrl.h"


#ifndef Enable
#define Enable 1
#endif

#ifndef Disable
#define Disable 0
#endif

#ifndef T16
#define T16 0x4
#endif

#ifndef T32
#define T32 0x0
#endif

#ifndef Periodic
#define Periodic 0x2
#endif
#ifndef OShot
#define OShot 0x1
#endif


/*==========================================================================
 *                                enable
 *==========================================================================*/
void Enble_Timer(uint32_t adr);


/*==========================================================================
 *                                disable
 *==========================================================================*/
void Disable_Timer(uint32_t adr);


/*==========================================================================
 *                                configration 
 *==========================================================================*/
void Cnfig_Timer(uint32_t adr, uint8_t val);


/*==========================================================================
 *                                mode 
 *==========================================================================*/
void Mod_Timer(uint32_t adr, uint8_t val);



/*==========================================================================
 *                                prescale 
 *==========================================================================*/
void Prsc_Timer(uint32_t adr, uint8_t val);


/*==========================================================================
 *                                preload
 *==========================================================================*/
void Prload_Timer(uint32_t adr, uint8_t val);



/*==========================================================================
 *                                clear
 *==========================================================================*/
void Int_Clr_Timer(uint32_t adr, uint8_t val);



/*==========================================================================
 *                                interrupt mask
 *==========================================================================*/
void Int_Msk_Timer(uint32_t adr, uint8_t val);

#endif